#!/usr/bin/env python3

import json, os, pwd, socket

from abcv.abcviewer import *
from abcv.tunebook import *

_username = pwd.getpwuid(os.getuid()).pw_gecos.strip(", ")
_email = _username + "@" + socket.getfqdn()

_default_settings = {
    "User name": _username,
    "User email": _email,
    "Open directory": os.environ["HOME"],
    "Save directory": os.environ["HOME"],
    "Default fit": "width",
}

app_dir = os.path.join(os.environ["HOME"],
                       ".abcviewer")

if not os.path.exists(app_dir):
    print("Creating app directory at %s." % app_dir)
    os.mkdir(app_dir)

class Settings(object):
    def __init__(self):
        self._filename = os.path.join(app_dir, "settings.json")

        # create settings file if it doesn't exist
        if not os.path.exists(self._filename):
            self._settings = _default_settings
            self._save()
        else:
            self._load()
            
    def _load(self):
        # load the settings file
        with codecs.open(self._filename, "r", "utf-8") as f:
            self._settings = json.load(f)

    def _save(self):
        with codecs.open(self._filename, "w", "utf-8") as f:
            json.dump(self._settings, f)

    def get(self, name):
        try:
            return self._settings[name]
        except KeyError:
            return None

    def set(self, name, value):
        self._settings[name] = value
        self._save()




qt_app = QApplication(sys.argv)

settings = Settings()

# if there's a filename passed in as an argument, load it; otherwise
# start empty
try:
    fn = sys.argv[1]
    app = AbcViewer(settings, fn)
except:
    app = AbcViewer(settings)
    
app.showMaximized()

# Run the application's event loop
qt_app.exec_()
