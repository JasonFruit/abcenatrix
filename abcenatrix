#!/usr/bin/env python3
# coding=utf-8

from __future__ import nested_scopes, generators, division, absolute_import, with_statement, print_function, unicode_literals

import json, os, socket

from abcv.abcviewer import *
from abcv.tunebook import *

# TODO: Make this right for all platforms
if os.name == "posix":
    import pwd
    _username = pwd.getpwuid(os.getuid()).pw_gecos.strip(", ")
else:
    import ctypes

    GetUserNameEx = ctypes.windll.secur32.GetUserNameExW
    NameDisplay = 3

    size = ctypes.pointer(ctypes.c_ulong(0))
    GetUserNameEx(NameDisplay, None, size)

    nameBuffer = ctypes.create_unicode_buffer(size.contents.value)
    GetUserNameEx(NameDisplay, nameBuffer, size)

    _username =  nameBuffer.value    


try:
    import getpass
    _login = getpass.getuser()
except:
    _login = _username
    
_email = _login + "@" + socket.getfqdn()

if os.name == "nt":
    homedir = os.environ["HOMEPATH"]
else:
    homedir = os.environ["HOME"]
    
_default_settings = {
    "User name": _username,
    "User email": _email,
    "Open directory": homedir,
    "Save directory": homedir,
    "Default fit": "width",
    "MIDI instrument": 1
}

app_dir = os.path.join(homedir,
                       ".abcenatrix")

if not os.path.exists(app_dir):
    print("Creating app directory at %s." % app_dir)
    os.mkdir(app_dir)

class Settings(object):
    def __init__(self):
        self._filename = os.path.join(app_dir, "settings.json")

        # create settings file if it doesn't exist
        if not os.path.exists(self._filename):
            self._settings = _default_settings
            self._save()
        else:
            self._load()
            
    def _load(self):
        # load the settings file
        with codecs.open(self._filename, "r", "utf-8") as f:
            self._settings = json.load(f)

    def _save(self):
        with codecs.open(self._filename, "w", "utf-8") as f:
            json.dump(self._settings, f)

    def get(self, name):
        try:
            return self._settings[name]
        except KeyError:
            return None

    def set(self, name, value):
        self._settings[name] = value
        self._save()




qt_app = QApplication(sys.argv)

settings = Settings()
if settings.get("MIDI instrument") == None:
    settings.set("MIDI instrument", 1)

# if there's a filename passed in as an argument, load it; otherwise
# start empty
try:
    fn = sys.argv[1]
    app = Application(settings, fn)
except:
    app = Application(settings)
    
app.showMaximized()

# Run the application's event loop
qt_app.exec_()
